/*
 * LineTrack.cpp
 *
 * Created: 2/14/2016 11:41:00 PM
 *  Author: Lujiale
 */ 

static const unsigned char table[] = {
	(1 << 4) + 8,		// 00000000
						// 00000001
	(2 << 4) + 3,		// 00000010
						// 00000011
	(3 << 4) + 5,		// 00000100
						// 00000101
	(3 << 4) + 4,		// 00000110
						// 00000111
	(4 << 4) + 7,		// 00001000
						// 00001001
	(2 << 4) + 5,		// 00001010
						// 00001011
	(6 << 4) + 6,		// 00001100
						// 00001101
	(4 << 4) + 5,		// 00001110
						// 00001111
	(5 << 4) + 9,		// 00010000
						// 00010001
	(2 << 4) + 6,		// 00010010
						// 00010011
	(5 << 4) + 7,		// 00010100
						// 00010101
	(3 << 4) + 4,		// 00010110
						// 00010111
	(8 << 4) + 8,		// 00011000
						// 00011001
	(5 << 4) + 8,		// 00011010
						// 00011011
	(7 << 4) + 7,		// 00011100
						// 00011101
	(5 << 4) + 6,		// 00011110
						// 00011111
	(6 << 4) + 11,		// 00100000
						// 00100001
	(2 << 4) + 7,		// 00100010
						// 00100011
	(3 << 4) + 8,		// 00100100
						// 00100101
	(3 << 4) + 4,		// 00100110
						// 00100111
	(9 << 4) + 9,		// 00101000
						// 00101001
	(2 << 4) + 7,		// 00101010
						// 00101011
	(6 << 4) + 6,		// 00101100
						// 00101101
	(4 << 4) + 5,		// 00101110
						// 00101111
	(10 << 4) + 10,		// 00110000
						// 00110001
	(6 << 4) + 10,		// 00110010
						// 00110011
	(10 << 4) + 10,		// 00110100
						// 00110101
	(3 << 4) + 7,		// 00110110
						// 00110111
	(9 << 4) + 9,		// 00111000
						// 00111001
	(9 << 4) + 9,		// 00111010
						// 00111011
	(8 << 4) + 8,		// 00111100
						// 00111101
	(6 << 4) + 7,		// 00111110
						// 00111111
	(7 << 4) + 11,		// 01000000
						// 01000001
	(2 << 4) + 8,		// 01000010
						// 01000011
	(3 << 4) + 9,		// 01000100
						// 01000101
	(3 << 4) + 4,		// 01000110
						// 01000111
	(7 << 4) + 10,		// 01001000
						// 01001001
	(2 << 4) + 5,		// 01001010
						// 01001011
	(6 << 4) + 6,		// 01001100
						// 01001101
	(4 << 4) + 5,		// 01001110
						// 01001111
	(11 << 4) + 11,		// 01010000
						// 01010001
	(2 << 4) + 11,		// 01010010
						// 01010011
	(7 << 4) + 9,		// 01010100
						// 01010101
	(3 << 4) + 4,		// 01010110
						// 01010111
	(8 << 4) + 8,		// 01011000
						// 01011001
	(5 << 4) + 8,		// 01011010
						// 01011011
	(7 << 4) + 7,		// 01011100
						// 01011101
	(5 << 4) + 6,		// 01011110
						// 01011111
	(12 << 4) + 12,		// 01100000
						// 01100001
	(7 << 4) + 12,		// 01100010
						// 01100011
	(12 << 4) + 12,		// 01100100
						// 01100101
	(3 << 4) + 8,		// 01100110
						// 01100111
	(12 << 4) + 12,		// 01101000
						// 01101001
	(7 << 4) + 12,		// 01101010
						// 01101011
	(9 << 4) + 9,		// 01101100
						// 01101101
	(4 << 4) + 5,		// 01101110
						// 01101111
	(11 << 4) + 11,		// 01110000
						// 01110001
	(11 << 4) + 11,		// 01110010
						// 01110011
	(11 << 4) + 11,		// 01110100
						// 01110101
	(7 << 4) + 11,		// 01110110
						// 01110111
	(10 << 4) + 10,		// 01111000
						// 01111001
	(10 << 4) + 10,		// 01111010
						// 01111011
	(9 << 4) + 9,		// 01111100
						// 01111101
	(7 << 4) + 8,		// 01111110
						// 01111111
	(8 << 4) + 15,		// 10000000
						// 10000001
	(2 << 4) + 9,		// 10000010
						// 10000011
	(3 << 4) + 10,		// 10000100
						// 10000101
	(3 << 4) + 4,		// 10000110
						// 10000111
	(4 << 4) + 11,		// 10001000
						// 10001001
	(2 << 4) + 5,		// 10001010
						// 10001011
	(6 << 4) + 6,		// 10001100
						// 10001101
	(4 << 4) + 5,		// 10001110
						// 10001111
	(12 << 4) + 12,		// 10010000
						// 10010001
	(2 << 4) + 9,		// 10010010
						// 10010011
	(5 << 4) + 7,		// 10010100
						// 10010101
	(3 << 4) + 4,		// 10010110
						// 10010111
	(8 << 4) + 8,		// 10011000
						// 10011001
	(5 << 4) + 8,		// 10011010
						// 10011011
	(7 << 4) + 7,		// 10011100
						// 10011101
	(5 << 4) + 6,		// 10011110
						// 10011111
	(13 << 4) + 13,		// 10100000
						// 10100001
	(2 << 4) + 13,		// 10100010
						// 10100011
	(8 << 4) + 13,		// 10100100
						// 10100101
	(3 << 4) + 4,		// 10100110
						// 10100111
	(11 << 4) + 11,		// 10101000
						// 10101001
	(2 << 4) + 9,		// 10101010
						// 10101011
	(6 << 4) + 6,		// 10101100
						// 10101101
	(4 << 4) + 5,		// 10101110
						// 10101111
	(10 << 4) + 10,		// 10110000
						// 10110001
	(6 << 4) + 10,		// 10110010
						// 10110011
	(10 << 4) + 10,		// 10110100
						// 10110101
	(3 << 4) + 7,		// 10110110
						// 10110111
	(9 << 4) + 9,		// 10111000
						// 10111001
	(9 << 4) + 9,		// 10111010
						// 10111011
	(8 << 4) + 8,		// 10111100
						// 10111101
	(6 << 4) + 7,		// 10111110
						// 10111111
	(14 << 4) + 14,		// 11000000
						// 11000001
	(8 << 4) + 14,		// 11000010
						// 11000011
	(14 << 4) + 14,		// 11000100
						// 11000101
	(3 << 4) + 9,		// 11000110
						// 11000111
	(14 << 4) + 14,		// 11001000
						// 11001001
	(8 << 4) + 14,		// 11001010
						// 11001011
	(10 << 4) + 10,		// 11001100
						// 11001101
	(4 << 4) + 5,		// 11001110
						// 11001111
	(14 << 4) + 14,		// 11010000
						// 11010001
	(8 << 4) + 14,		// 11010010
						// 11010011
	(14 << 4) + 14,		// 11010100
						// 11010101
	(3 << 4) + 9,		// 11010110
						// 11010111
	(11 << 4) + 11,		// 11011000
						// 11011001
	(8 << 4) + 11,		// 11011010
						// 11011011
	(7 << 4) + 7,		// 11011100
						// 11011101
	(5 << 4) + 6,		// 11011110
						// 11011111
	(13 << 4) + 13,		// 11100000
						// 11100001
	(13 << 4) + 13,		// 11100010
						// 11100011
	(13 << 4) + 13,		// 11100100
						// 11100101
	(8 << 4) + 13,		// 11100110
						// 11100111
	(13 << 4) + 13,		// 11101000
						// 11101001
	(13 << 4) + 13,		// 11101010
						// 11101011
	(13 << 4) + 13,		// 11101100
						// 11101101
	(4 << 4) + 9,		// 11101110
						// 11101111
	(12 << 4) + 12,		// 11110000
						// 11110001
	(12 << 4) + 12,		// 11110010
						// 11110011
	(12 << 4) + 12,		// 11110100
						// 11110101
	(12 << 4) + 12,		// 11110110
						// 11110111
	(11 << 4) + 11,		// 11111000
						// 11111001
	(11 << 4) + 11,		// 11111010
						// 11111011
	(10 << 4) + 10,		// 11111100
						// 11111101
	(8 << 4) + 9,		// 11111110
						// 11111111
};

namespace POSITION
{

int displacement(char b){
	static int last = 8;
	if (!b) return last;
	unsigned char c = table[(unsigned char)b>>1];
	return last = b & 1 ? c >> 4 : c & 15;
}

}
